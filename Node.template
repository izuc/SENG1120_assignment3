// Filename: Node.template
// Date Created: 16/10/2011
// Author: Lance Baker
// Course: SENG1120
// Student Number: c3128034
#include <cstdlib>

namespace lance_project {
	// The default constructor.
	template <class T>
	Node<T>::Node() {
	
	}
	
	// The constructor accepts the data.
	template <class T>
	Node<T>::Node(T* data) {
		this->data = data;
	}

	// The constructor accepts the data, left node, and right node,
	template <class T>
	Node<T>::Node(T* data, Node<T>* left, Node<T>* right) {
		this->data = data;
		this->left = left;
		this->right = right;
	}
	
	// The destructor destroys the object attributes.
	template <class T>
	Node<T>::~Node() {
		delete this->data;
		delete this->left;
		delete this->right;
	}

	template <class T>
	Node<T>* Node<T>::remove(Node<T>* parent, T* item) {
		// Compares the item with the current object.
		int comparison = item->compareTo(this->getData());
		// If the comparison matches.
		if (comparison == 0) {
			// If the node has both children.
			if ((this->getLeft() != NULL) && (this->getRight() != NULL)) {
				// It then sets the data to the smallest object on right branch.
				this->setData(this->getRight()->min());
				// Then removes the object.
				return this->getRight()->remove(this, this->getData());
			// Otherwise, the node only has one or none.
			} else {
				// If the current node is on the left branch.
				if (parent->getLeft() == this) {
					// It removes the object by setting it to (on the parent) with the current left node, 
					// therefore it just cuts the node out. If the left node doesn't exist it uses the right.
					parent->setLeft((this->getLeft() != NULL) ? this->getLeft() : this->getRight());
					return this; // Returns this object.
				// If the current node is on the right branch.
				} else if (parent->getRight() == this) {
					// It removes the object by setting it to (on the parent) with the left node (if it exists),
					// or it uses the right. So therefore it just cuts the node out.
					parent->setRight((this->getLeft() != NULL) ? this->getLeft() : this->getRight());
					return this; // Returns this object.
				}
			}
		// If the item is less than the node data.
		} else if (comparison < 0) {
			// If the left branch exists.
			if (this->getLeft() != NULL) {
				// Traverses further down the left branch, passing
				// this object as the parent, and the item that is being searched.
				return this->getLeft()->remove(this, item);
			}
		// If the item is greater than the node data.
		} else if (comparison > 0) {
			// If the right branch exists.
			if (this->getRight() != NULL) {
				// It then traverses further down towards the right,
				// passing this object as the parent, and the item.
				return this->getRight()->remove(this, item);
			}
		}
		return NULL; // The item couldn't be found.
	}
	
	// The min method is invoked by the remove method. It is used to 
	// fetch the smallest connected node object (which is the one on the far left branch).
	template <class T>
	T* Node<T>::min() {
		// If the left branch doesn't have a connected node.
		if (this->getLeft() == NULL) {
			// Then it is the furthest down the left, so it returns the data object.
			return this->getData();
		} else {
			// Otherwise, it will traverse down to the next node by invoking the same method.
			return this->getLeft()->min();
		}
	}

	// Setter for the data.
	template <class T>
	void Node<T>::setData(T* data) {
		this->data = data;
	}

	// Setter for the left branch.
	template <class T>
	void Node<T>::setLeft(Node<T>* left) {
		this->left = left;
	}
	
	// Setter for the right branch.
	template <class T>
	void Node<T>::setRight(Node<T>* right) {
		this->right = right;
	}

	// Getter for the data.
	template <class T>
	T* Node<T>::getData() {
		return this->data;
	}

	// Getter for the left branch.
	template <class T>
	Node<T>* Node<T>::getLeft() {
		return this->left;
	}
	
	// Getter for the right branch.
	template <class T>
	Node<T>* Node<T>::getRight() {
		return this->right;
	}
}
